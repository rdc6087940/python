{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cfed34dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "def comment_croll(link,driver):\n",
    "    # URL & 스크롤 위치 초기화\n",
    "    driver.get(link)\n",
    "    driver.implicitly_wait(3)\n",
    "    time.sleep(1.5)\n",
    "    driver.execute_script(\"window.scrollTo(0, 800)\")\n",
    "    time.sleep(3)\n",
    "    \n",
    "    \n",
    "    # 댓글 페이지 추가 노출 코드\n",
    "    last_height = driver.execute_script(\"return document.documentElement.scrollHeight\")\n",
    "\n",
    "    while True:\n",
    "        driver.execute_script(\"window.scrollTo(0, document.documentElement.scrollHeight);\")\n",
    "        time.sleep(1.5)\n",
    "\n",
    "        new_height = driver.execute_script(\"return document.documentElement.scrollHeight\")\n",
    "        if new_height == last_height:\n",
    "            break\n",
    "        last_height = new_height\n",
    "\n",
    "    time.sleep(1.5)\n",
    "    \n",
    "    \n",
    "    # 팝업창 제거\n",
    "    try:\n",
    "        driver.find_element_by_css_selector(\"#dismiss-button > a\").click()\n",
    "    except:\n",
    "        pass\n",
    "    \n",
    "    \n",
    "    # 댓글 크롤링\n",
    "    html_source = driver.page_source\n",
    "    soup = BeautifulSoup(html_source, 'html.parser')\n",
    "\n",
    "    id_list = soup.select(\"div#header-author > h3 > #author-text > span\")\n",
    "    comment_list = soup.select(\"yt-formatted-string#content-text\")\n",
    "\n",
    "    id_final = []\n",
    "    comment_final = []\n",
    "\n",
    "    for i in range(len(comment_list)):\n",
    "        temp_id = id_list[i].text\n",
    "        temp_id = temp_id.replace('\\n', '')\n",
    "        temp_id = temp_id.replace('\\t', '')\n",
    "        temp_id = temp_id.replace('    ', '')\n",
    "        id_final.append(temp_id)\n",
    "\n",
    "        temp_comment = comment_list[i].text\n",
    "        temp_comment = temp_comment.replace('\\n', '')\n",
    "        temp_comment = temp_comment.replace('\\t', '')\n",
    "        temp_comment = temp_comment.replace('    ', '')\n",
    "        comment_final.append(temp_comment)\n",
    "        \n",
    "        \n",
    "    # 데이터 정제\n",
    "    keyword_list = []\n",
    "    word = \"\"\n",
    "    for i in range(len(comment_list)):\n",
    "        words = okt.nouns(comment_final[i])\n",
    "        word += \" \".join(words)\n",
    "        word += \" \"\n",
    "    \n",
    "    \n",
    "    \n",
    "    # 정제된 데이터 빈도수 분석\n",
    "    wordList = word.split()\n",
    "    wordLists = []\n",
    "    wordCount = {} \n",
    "    wordCounts = []\n",
    "     # word -> count 기준 정렬한 dictionary\n",
    "    for word in wordList:\n",
    "        # Get 명령어를 통해, Dictionary에 Key가 없으면 0리턴\n",
    "        wordCount[word] = wordCount.get(word, 0) + 1 \n",
    "\n",
    "    keys = sorted(wordCount.items(),key=(lambda x:x[1]),reverse=True)\n",
    "\n",
    "    for word in keys:\n",
    "        wordLists.append(word[0])  \n",
    "        wordCounts.append(word[1])\n",
    "        \n",
    "    \n",
    "    pd2_data = {\"키워드\" : wordLists, \"빈도수\" : wordCounts}\n",
    "    youtube_pd2 = pd.DataFrame(pd2_data)\n",
    "    \n",
    "    return youtube_pd2"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:tensor] *",
   "language": "python",
   "name": "conda-env-tensor-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
